# -*- coding: utf-8 -*-
"""heliverse assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GVOdx8zG30esKYQhJUTC6VQWZAR5YybE
"""



"""**DATA LOADING AND INITIAL EXPLORATION**"""

import pandas as pd
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

df=pd.read_csv("/content/WA_Fn-UseC_-HR-Employee-Attrition.csv")
df.head()

df.columns

df.isnull().sum()

df.select_dtypes(include=['object']).columns

"""**DATA ENCODING**"""

df_encoded = pd.get_dummies(df, columns=['BusinessTravel', 'Department', 'EducationField', 'JobRole', 'MaritalStatus', 'OverTime'])
df_encoded.head()

columns_to_drop = ['BusinessTravel', 'Department', 'EducationField', 'JobRole', 'MaritalStatus', 'OverTime']
columns_to_drop_existing = [col for col in columns_to_drop if col in df_encoded.columns]
df_encoded.drop(columns=columns_to_drop_existing, inplace=True)

df_encoded.head()

df_encoded.select_dtypes(include=['object']).columns

"""**SPLITTING THE DATASET INTO TRAINING SET AND TESTING SET**"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error


X = df_encoded.drop(columns=['Attrition','Gender', 'Over18'])
y = df_encoded['Attrition']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""**LABEL ENCODING AND TARGET VARIABLE**"""

from sklearn.preprocessing import LabelEncoder


label_encoder = LabelEncoder()
y_train_encoded = label_encoder.fit_transform(y_train)
y_test_encoded = label_encoder.transform(y_test)

"""**MODEL TRAINING**"""

model = LinearRegression()
model.fit(X_train, y_train_encoded)

from sklearn.ensemble import RandomForestRegressor
rf_regressor = RandomForestRegressor(n_estimators=100, random_state=42)  # You can adjust the number of trees with the 'n_estimators' parameter
rf_regressor.fit(X_train, y_train_encoded)

from sklearn.tree import DecisionTreeRegressor
dt_regressor = DecisionTreeRegressor(random_state=42)
dt_regressor.fit(X_train, y_train_encoded)

y_pred = model.predict(X_test)
y_pred
y_pred2=rf_regressor.predict(X_test)
y_pred2
y_pred3=dt_regressor.predict(X_test)
y_pred3

"""**MODEL EVALUATION**"""

from sklearn.metrics import mean_absolute_error,r2_score,mean_absolute_percentage_error


mse = mean_squared_error(y_test_encoded, y_pred)
print("Mean Squared Error:", mse)
mae=mean_absolute_error(y_test_encoded,y_pred)
print("Mean absolute Error:",mae)
r2=r2_score(y_test_encoded,y_pred)
print("R-squared(R2):",r2)
mape = mean_absolute_percentage_error(y_test_encoded, y_pred)
print("Mean Absolute Percentage Error (MAPE):", mape)

mse = mean_squared_error(y_test_encoded, y_pred2)
print("Mean Squared Error:", mse)
mae=mean_absolute_error(y_test_encoded,y_pred2)
print("Mean absolute Error:",mae)
r2=r2_score(y_test_encoded,y_pred2)
print("R-squared(R2):",r2)
mape = mean_absolute_percentage_error(y_test_encoded, y_pred2)
print("Mean Absolute Percentage Error (MAPE):", mape)

mse = mean_squared_error(y_test_encoded, y_pred3)
print("Mean Squared Error:", mse)
mae=mean_absolute_error(y_test_encoded,y_pred3)
print("Mean absolute Error:",mae)
r2=r2_score(y_test_encoded,y_pred3)
print("R-squared(R2):",r2)
mape = mean_absolute_percentage_error(y_test_encoded, y_pred3)
print("Mean Absolute Percentage Error (MAPE):", mape)